"use strict";(globalThis.webpackChunkmy_tutorial=globalThis.webpackChunkmy_tutorial||[]).push([[3773],{3972:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"mcut-tutorial/week-2/2-2","title":"2-2 Create Docker Image","description":"A Docker image is a package that contains everything needed to run an app. It includes code, libraries, and settings. When you run it, it creates a Docker container. It ensures the app works the same everywhere.","source":"@site/docs/mcut-tutorial/week-2/2-2.md","sourceDirName":"mcut-tutorial/week-2","slug":"/mcut-tutorial/week-2/2-2","permalink":"/zb/docs/mcut-tutorial/week-2/2-2","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mcut-tutorial/week-2/2-2.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"2-2 Create Docker Image","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"2-1 Introduction to RZ/G2L","permalink":"/zb/docs/mcut-tutorial/week-2/2-1"},"next":{"title":"2-3 Enter Dev Container","permalink":"/zb/docs/mcut-tutorial/week-2/2-3"}}');var a=t(4848),i=t(8453);const o={title:"2-2 Create Docker Image",sidebar_position:2},s="2-2 Create an Image using Dockerfile",c={},l=[{value:"Step 1: Download the correct dockerfile",id:"step-1-download-the-correct-dockerfile",level:2},{value:"Step 2: Build an Image",id:"step-2-build-an-image",level:2},{value:"Step 3: Start a Container using our Image",id:"step-3-start-a-container-using-our-image",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"2-2-create-an-image-using-dockerfile",children:"2-2 Create an Image using Dockerfile"})}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.strong,{children:"Docker image"})," is a package that contains everything needed to run an app. It includes code, libraries, and settings. When you run it, it creates a Docker container. It ensures the app works the same everywhere."]}),"\n",(0,a.jsx)(n.p,{children:'The easiest way to create a Ubuntu container with everything you need to build the Board Support Package is to use a "dockerfile" created by Renesas.'}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"step-1-download-the-correct-dockerfile",children:"Step 1: Download the correct dockerfile"}),"\n",(0,a.jsx)(n.p,{children:'To create an "Image", we will use a dockerfile which is a set of commands that will set up our container for us.'}),"\n",(0,a.jsx)(n.p,{children:"You can use this command to downlaod Dockerfile.rz_ubuntu-20.04 using this command line."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:'title="download dockerfile"',children:"wget https://raw.githubusercontent.com/renesas-rz/docker_setup/master/Dockerfile.rz_ubuntu-20.04\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:'title="download packages"',children:"apt-get install -y gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential chrpath socat cpio python python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping libsdl1.2-dev xterm p7zip-full libyaml-dev libssl-dev bmap-tools\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"OR"})}),"\n",(0,a.jsxs)(n.p,{children:["Click ",(0,a.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(5816).A+"",children:"here"})," to download it."]}),"\n",(0,a.jsx)(n.h2,{id:"step-2-build-an-image",children:"Step 2: Build an Image"}),"\n",(0,a.jsx)(n.p,{children:'Before we can use docker to build our BSP, we first we need to build an docker "Image". We will use a default Ubuntu image from Docker Hub as the staring point.'}),"\n",(0,a.jsx)(n.p,{children:"Enter the command below in Ubuntu's Terminal."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'docker build --no-cache \\\n  --build-arg "host_uid=$(id -u)" \\\n  --build-arg "host_gid=$(id -g)" \\\n  --build-arg "USERNAME=$USER" \\\n  --build-arg "TZ_VALUE=$(cat /etc/timezone)" \\\n  --tag rz_ubuntu-20.04 \\\n  --file Dockerfile.rz_ubuntu-20.04  .\n'})}),"\n",(0,a.jsx)(n.p,{children:'You may change the --tag name "rz_ubuntu-20.04" to whatever you want.'}),"\n",(0,a.jsx)(n.p,{children:"Confirm your image was created."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ docker images\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"REPOSITORY           TAG       IMAGE ID       CREATED          SIZE\nrz_ubuntu-20.04      latest    960cf1be32b0   57 seconds ago   \n"})}),"\n",(0,a.jsx)(n.h2,{id:"step-3-start-a-container-using-our-image",children:"Step 3: Start a Container using our Image"}),"\n",(0,a.jsx)(n.p,{children:"Now that we have created our docker image, we can start a container based off that image."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir -p /home/$USER/rzg2l\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'docker run -it \\\n  --name=rzg2l \\\n  --volume="/home/$USER/rzg2l:/home/$USER/rzg2l" \\\n  --workdir="/home/$USER" \\\n  rzg2l_ubuntu-20.04\n'})}),"\n",(0,a.jsx)(n.p,{children:"You will now be running in a command line shell inside your container."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"user@(docker)$ "})}),"\n",(0,a.jsx)(n.p,{children:"Now exit (stop) your container by typing"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:" exit\n"})}),"\n",(0,a.jsx)(n.admonition,{title:"Parameters",type:"note",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"docker run"}),": Run a processes in isolated container"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-it"}),": Starts a command shell inside your container that you can interact with"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--name"}),": Chooses a name for your container"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--volume"}),": Choose a directory on your host machine that you want to map inside your container to use as your shared directory"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"--workdir"}),": Choose a default directory where you want to start inside your container, for example your shared directory"]}),"\n"]})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},5816:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/files/Dockerfile.rzg_ubuntu-20-2b78772b50b3974710f07d5086870736.04"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(6540);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);